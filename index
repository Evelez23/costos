<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>Costos de Estampado Digital 2.0</title>
<script src="https://cdn.tailwindcss.com"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.4.0/exceljs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
<style>
/* ESTILOS DEL INTRO */
.intro-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
  background: #36454F;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  overflow: hidden;
}

.tegralogo {
  width: 280px;
  height: 100px;
  animation: float 3s ease-in-out infinite, glow 2s ease-in-out infinite;
  margin-bottom: 2rem;
}

.tegralogo svg {
  width: 100%;
  height: 100%;
}

.intro-title {
  font-size: 2.5rem;
  font-weight: 900;
  background: linear-gradient(135deg, #DC2626, #F59E0B);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  animation: fadeInUp 1s ease-out, textGlow 2s ease-in-out infinite;
  margin-bottom: 1rem;
  text-align: center;
}

.intro-subtitle {
  font-size: 1.2rem;
  color: #E5E7EB;
  animation: fadeInUp 1s ease-out 0.5s both;
  text-align: center;
  margin-bottom: 2rem;
}

.loading-bar {
  width: 300px;
  height: 4px;
  background: rgba(255,255,255,0.2);
  border-radius: 2px;
  overflow: hidden;
  animation: fadeInUp 1s ease-out 1s both;
}

.loading-progress {
  height: 100%;
  background: linear-gradient(90deg, #DC2626, #F59E0B);
  border-radius: 2px;
  width: 0%;
  transition: width 3s ease-in-out;
}

.particle {
  position: absolute;
  width: 4px;
  height: 4px;
  background: #DC2626;
  border-radius: 50%;
  animation: particleFloat 3s linear infinite;
}

/* ESTILOS DE CARGA DE IM√ÅGENES */
.image-loading-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 2000;
  color: white;
}

.spinner {
  border: 4px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top: 4px solid #DC2626;
  width: 50px;
  height: 50px;
  animation: spin 1s linear infinite;
  margin-bottom: 20px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* ANIMACIONES */
@keyframes float {
  0%, 100% { transform: translateY(0px); }
  50% { transform: translateY(-10px); }
}

@keyframes glow {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.8; }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes textGlow {
  0%, 100% { filter: drop-shadow(0 0 10px rgba(220, 38, 38, 0.5)); }
  50% { filter: drop-shadow(0 0 20px rgba(220, 38, 38, 0.8)); }
}

@keyframes particleFloat {
  0% {
    transform: translateY(100vh) rotate(0deg);
    opacity: 1;
  }
  100% {
    transform: translateY(-100px) rotate(360deg);
    opacity: 0;
  }
}

/* ESTILOS GENERALES */
body {
  font-family: 'Inter', sans-serif;
  background: linear-gradient(135deg, #0f0f0f 0%, #1a1a1a 100%);
  color: #fff;
  min-height: 100vh;
}
.container { max-width: 1200px; margin: 0 auto; padding: 20px; }
h1,h2 { color: #DC2626; font-weight: 900; margin-bottom: 10px; }
.section { 
  background: rgba(42, 42, 42, 0.8); 
  border: 1px solid #444; 
  border-radius: 1rem; 
  padding: 2rem; 
  margin-bottom: 2rem;
  backdrop-filter: blur(10px);
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}
select, input{
  background: #333; 
  color: #fff; 
  border: 1px solid #555; 
  padding: 12px; 
  border-radius: 0.75rem; 
  width: 100%;
  transition: all 0.3s ease;
}
select:focus, input:focus {
  outline: none;
  border-color: #DC2626;
  box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);
}
.upload-area{
  background: rgba(58, 58, 58, 0.6); 
  border: 2px dashed #666; 
  border-radius: 1rem; 
  padding: 3rem; 
  text-align:center; 
  cursor:pointer; 
  transition: all 0.3s ease;
}
.upload-area:hover{
  background: rgba(78, 78, 78, 0.8);
  border-color: #DC2626;
  transform: translateY(-2px);
}
.generate-btn {
  padding: 1rem 2.5rem;
  background: linear-gradient(135deg, #DC2626 0%, #EF4444 100%);
  color: #fff;
  border: none;
  border-radius: 1rem;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 1.1rem;
  box-shadow: 0 4px 15px rgba(220, 38, 38, 0.3);
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin: 2rem auto;
}
.generate-btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 25px rgba(220, 38, 38, 0.4);
  background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
}
.summary-card{
  background: rgba(42, 42, 42, 0.8); 
  border: 1px solid #444; 
  border-radius: 1rem; 
  padding: 1.5rem; 
  text-align:center;
  transition: all 0.3s ease;
}
.summary-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
}
.summary-card .stat-value{
  font-size: 2rem; 
  font-weight: 900; 
  background: linear-gradient(135deg, #DC2626, #F59E0B);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}
</style>
</head>
<body>
<!-- INTRO -->
<div id="intro" class="intro-container">
  <div id="particles"></div>
  <div class="tegralogo">
    <svg id="Layer_1" xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 261.01 94.07">
      <!-- Logo Tegra -->
      <rect class="st1" x="5" y="6.13" width="252.38" height="84.38" rx="14.31" ry="14.31"/>
      <!-- Contenido del logo... -->
    </svg>
  </div>
  <h1 class="intro-title">COSTOS DE ESTAMPADO DIGITAL 2.0</h1>
  <p class="intro-subtitle">Sistema de c√°lculo inteligente - Inicializando</p>
  <div class="loading-bar">
    <div id="loadingProgress" class="loading-progress"></div>
  </div>
</div>

<!-- OVERLAY DE CARGA DE IM√ÅGENES -->
<div id="imageLoadingOverlay" class="image-loading-overlay" style="display: none;">
  <div class="spinner"></div>
  <h3 id="loadingText">Procesando im√°genes...</h3>
  <p id="loadingSubtext" class="text-gray-300 mt-2">Por favor espera</p>
</div>

<!-- APLICACI√ìN PRINCIPAL -->
<div id="app" style="display: none;">
  <div class="container">
    <header class="text-center mb-12">
      <div class="flex justify-center items-center mb-6">
        <div class="h-16 rounded-xl bg-[#DC2626] p-3 transform hover:scale-105 transition-transform">
          <span class="text-white font-bold text-xl">TEGRA</span>
        </div>
      </div>
      <h1 class="text-5xl font-black text-white mb-4 bg-gradient-to-r from-[#DC2626] to-[#F59E0B] bg-clip-text text-transparent">
        Costos de Estampado Digital 2.0
      </h1>
      <p class="text-xl text-gray-300 max-w-2xl mx-auto">
        La forma m√°s inteligente de calcular costos de estampado
      </p>
    </header>

    <div class="section">
      <h2 class="text-2xl font-bold mb-6 flex items-center gap-3">
        <span class="w-2 h-8 bg-[#DC2626] rounded-full"></span>
        1. Carga de Im√°genes
      </h2>
      <label for="imageUpload" class="upload-area block">
        <input id="imageUpload" type="file" accept="image/png" multiple class="hidden"/>
        <div class="text-4xl mb-4">üìÅ</div>
        <p class="text-xl text-gray-200 mb-4 font-medium">Arrastra tus archivos PNG aqu√≠</p>
        <p class="text-gray-400 mb-6">Formato: HF1234_XL.png, HF1234_L.png, etc.</p>
        <span class="upload-button inline-block text-white px-6 py-3 rounded-xl font-bold text-lg shadow-lg hover:shadow-xl transition-all" style="background: linear-gradient(135deg, #DC2626 0%, #EF4444 100%);">
  Seleccionar Im√°genes
</span>
        <p id="fileNameDisplay" class="file-name bg-opacity-10 bg-[#DC2626] border rounded-lg p-3 mt-4">
          Ninguna imagen seleccionada ‚Ä¢ Se usa 150 PPI fijo
        </p>
      </label>
    </div>

    <div class="section">
      <h2 class="text-2xl font-bold mb-6 flex items-center gap-3">
        <span class="w-2 h-8 bg-[#DC2626] rounded-full"></span>
        2. Datos del Dise√±o
      </h2>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div>
          <label class="block text-gray-300 mb-2 font-medium">Customer</label>
          <select id="globalCustomer" class="hover:border-gray-500 cursor-pointer">
            <option value="">Seleccionar customer...</option>
            <option value="COMPOUND">COMPOUND</option>
            <option value="FANATICS">FANATICS</option>
            <option value="MODIFIED">MODIFIED</option>
            <option value="TEGRA">TEGRA</option>
            <option value="OTHER">OTHER</option>
          </select>
        </div>
        <div>
          <label class="block text-gray-300 mb-2 font-medium">Style</label>
          <input id="globalStyle" placeholder="Se detectar√° autom√°ticamente" class="hover:border-gray-500 bg-gray-700" readonly>
          <p class="text-xs text-gray-400 mt-1">Se extrae del nombre del archivo PNG</p>
        </div>
        <div>
          <label class="block text-gray-300 mb-2 font-medium">Description</label>
          <input id="globalDesc" placeholder="Ej: Logo frontal, Espalda, etc." class="hover:border-gray-500">
        </div>
      </div>
    </div>

    <div class="section">
      <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
        <div>
          <h2 class="text-2xl font-bold flex items-center gap-3">
            <span class="w-2 h-8 bg-[#DC2626] rounded-full"></span>
            3. Resumen de An√°lisis
          </h2>
          <p class="text-gray-400 mt-2">Revisa los datos antes de generar el reporte</p>
        </div>
        
        <button id="generateExcelBtn" class="generate-btn">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          Generar Reporte Excel
        </button>
      </div>

      <div class="stats-grid grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <div class="stat-item bg-gray-800 rounded-lg p-4 text-center">
          <div class="stat-number text-2xl font-bold" id="totalImages">0</div>
          <div class="stat-label text-gray-400 text-sm">Im√°genes</div>
        </div>
        <div class="stat-item bg-gray-800 rounded-lg p-4 text-center">
          <div class="stat-number text-2xl font-bold" id="totalPixels">0</div>
          <div class="stat-label text-gray-400 text-sm">P√≠xeles Totales</div>
        </div>
        <div class="stat-item bg-gray-800 rounded-lg p-4 text-center">
          <div class="stat-number text-2xl font-bold" id="totalPainted">0</div>
          <div class="stat-label text-gray-400 text-sm">P√≠xeles Pintados</div>
        </div>
        <div class="stat-item bg-gray-800 rounded-lg p-4 text-center">
          <div class="stat-number text-2xl font-bold" id="uniqueSizes">0</div>
          <div class="stat-label text-gray-400 text-sm">Tallas √önicas</div>
        </div>
      </div>

      <div id="summaryCardsContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <div class="text-center py-12 col-span-full">
          <div class="text-6xl mb-4">üìä</div>
          <p class="text-xl text-gray-400 mb-2">Sube im√°genes para ver el an√°lisis</p>
          <p class="text-gray-500">El resumen aparecer√° aqu√≠ autom√°ticamente</p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// VARIABLES GLOBALES
const REQUIRED_PPI = 150;
const LUM_THRESH = 240;
let analyzedRows = [];

// FUNCI√ìN PRINCIPAL PARA GENERAR EXCEL
async function generateDynamicExcel(event) {
  if(!analyzedRows.length) {
    alert("üì∏ Primero sube algunas im√°genes PNG para analizar.");
    return;
  }

  if(!document.getElementById('globalCustomer').value) {
    alert("üë§ Selecciona un Customer antes de generar el Excel.");
    return;
  }

  try {
    const originalButton = event.target.closest('button') || event.target;
    const originalText = originalButton.innerHTML;
    originalButton.innerHTML = `
      <svg class="animate-spin h-5 w-5 mr-3" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      Generando Excel...
    `;
    originalButton.disabled = true;

    const currentCustomer = document.getElementById('globalCustomer').value;
    const currentDesc = document.getElementById('globalDesc').value;
    const currentStyle = document.getElementById('globalStyle').value;

    let fileName = 'Digital_Cost';
    if (currentStyle) {
      fileName = `Digital_Cost_${currentStyle}`;
    } else {
      const today = new Date().toISOString().split('T')[0];
      fileName = `Digital_Cost_${today}`;
    }

    fileName = fileName.replace(/[^a-zA-Z0-9_-]/g, '_');

    const resp = await fetch('./base_digital_cost.xlsx');
    if(!resp.ok) throw new Error("No se encontr√≥ base_digital_cost.xlsx");
    
    const buf = await resp.arrayBuffer();
    const wb = new ExcelJS.Workbook();
    
    await wb.xlsx.load(buf);
    const ws = wb.getWorksheet('John');

    const today = new Date().toISOString().split('T')[0];
    
    console.log("üîÑ Generando Excel con datos...");

    // MAPA DE TALLAS A FILAS
    const sizeMap = {
      '2XS': 15, 'XS': 16, 'S': 17, 'M': 18, 
      'L': 19, 'XL': 20, '2XL': 21, '3XL': 22, '4XL': 23
    };

    // LIMPIAR Y PREPARAR FILAS
    for(let i = 15; i <= 23; i++) {
      ws.getRow(i).hidden = false;
      ['A', 'B', 'C', 'D', 'E', 'F', 'H', 'I', 'J', 'K'].forEach(col => {
        const cell = ws.getCell(`${col}${i}`);
        cell.value = null;
      });
      ws.getCell(`J${i}`).numFmt = '0.000';
    }

    // ORDENAR TALLAS
    const ordenTallas = ['2XS', 'XS', 'S', 'M', 'L', 'XL', '2XL', '3XL', '4XL'];
    const tallasOrdenadas = analyzedRows
      .sort((a, b) => ordenTallas.indexOf(a.size) - ordenTallas.indexOf(b.size));

    console.log(`üìä Tallas a procesar: ${tallasOrdenadas.map(t => t.size).join(', ')}`);

    // LLENAR DATOS Y CALCULAR COLUMNA G MANUALMENTE
    tallasOrdenadas.forEach((imagen) => {
      const rowNumber = sizeMap[imagen.size];
      
      if(rowNumber) {
        console.log(`üìù Procesando talla ${imagen.size} en fila ${rowNumber}`);
        
        // DATOS B√ÅSICOS
        ws.getCell(`A${rowNumber}`).value = currentCustomer;
        ws.getCell(`B${rowNumber}`).value = currentStyle;
        ws.getCell(`C${rowNumber}`).value = currentDesc;
        ws.getCell(`D${rowNumber}`).value = today;
        ws.getCell(`E${rowNumber}`).value = Math.round(imagen.total);
        ws.getCell(`F${rowNumber}`).value = Math.round(imagen.painted);
        ws.getCell(`H${rowNumber}`).value = imagen.size;
        ws.getCell(`I${rowNumber}`).value = 1;
        
        // DIMENSIONES
        const heightCell = ws.getCell(`J${rowNumber}`);
        heightCell.value = parseFloat(imagen.heightIn.toFixed(3));
        ws.getCell(`K${rowNumber}`).value = 64.25;
        
        // ‚úÖ COLUMNA G CALCULADA MANUALMENTE (INK AREA OF PAPER)
        const inkArea = imagen.painted / imagen.total;
        ws.getCell(`G${rowNumber}`).value = inkArea;
        console.log(`üéØ Columna G calculada: ${inkArea.toFixed(6)} para ${imagen.size}`);
      }
    });

    // OCULTAR FILAS NO UTILIZADAS
    const tallasUsadas = new Set(analyzedRows.map(row => row.size));
    Object.entries(sizeMap).forEach(([talla, fila]) => {
      if (!tallasUsadas.has(talla)) {
        console.log(`üëª Ocultando fila ${fila} (talla ${talla})`);
        ws.getRow(fila).hidden = true;
      }
    });

    console.log("üíæ Guardando archivo...");
    const out = await wb.xlsx.writeBuffer();
    
    saveAs(new Blob([out]), `${fileName}.xlsx`);
    
    originalButton.innerHTML = originalText;
    originalButton.disabled = false;
    
    const tallasProcesadas = tallasOrdenadas.map(r => r.size).join(', ');
    
    let mensaje = `‚úÖ Excel generado exitosamente!\nüìÅ Archivo: ${fileName}.xlsx\nüìä Tallas: ${tallasProcesadas}\nüë§ Customer: ${currentCustomer}\nüè∑Ô∏è Style: ${currentStyle}\n\n‚ú® Columna G calculada correctamente`;
    
    alert(mensaje);
    
  } catch (error) {
    console.error("Error:", error);
    const originalButton = event.target.closest('button') || event.target;
    originalButton.innerHTML = 'Generar Reporte Excel';
    originalButton.disabled = false;
    alert("‚ùå Error: " + error.message);
  }
}

// FUNCIONES DE CARGA DE IM√ÅGENES
function showImageLoading(message = "Procesando im√°genes...") {
  const overlay = document.getElementById('imageLoadingOverlay');
  const loadingText = document.getElementById('loadingText');
  const loadingSubtext = document.getElementById('loadingSubtext');
  
  loadingText.textContent = message;
  loadingSubtext.textContent = "Por favor espera";
  overlay.style.display = 'flex';
}

function hideImageLoading() {
  const overlay = document.getElementById('imageLoadingOverlay');
  overlay.style.display = 'none';
}

function updateImageLoadingProgress(processed, total) {
  const loadingSubtext = document.getElementById('loadingSubtext');
  loadingSubtext.textContent = `Procesando ${processed} de ${total} im√°genes...`;
}

function analyzeImage(name, dataUrl, img, index, total) {
  return new Promise((resolve) => {
    setTimeout(() => {
      updateImageLoadingProgress(index + 1, total);
      
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      canvas.width = img.width;
      canvas.height = img.height;
      ctx.drawImage(img, 0, 0);
      
      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
      let painted = 0;
      
      for(let i = 0; i < imageData.length; i += 4) {
        const lum = 0.299 * imageData[i] + 0.587 * imageData[i+1] + 0.114 * imageData[i+2]; 
        if(lum <= LUM_THRESH) painted++;
      }
      
      const totalPixels = img.width * img.height;
      const widthIn = img.width / REQUIRED_PPI;
      const heightIn = img.height / REQUIRED_PPI;
      
      const baseName = name.replace(/\.png$/i, '');
      const styleMatch = baseName.split('_')[0];
      const sizeMatch = name.match(/(2XS|XS|S|M|L|XL|2XL|3XL|4XL)/i); 
      const size = sizeMatch ? sizeMatch[1].toUpperCase() : 'UNKNOWN';
      
      if(styleMatch && !document.getElementById('globalStyle').value) {
        document.getElementById('globalStyle').value = styleMatch;
      }
      
      analyzedRows.push({
        customer: document.getElementById('globalCustomer').value,
        style: styleMatch,
        desc: document.getElementById('globalDesc').value,
        size: size,
        total: totalPixels,
        painted: painted,
        widthIn: widthIn,
        heightIn: heightIn,
        dataUrl: dataUrl
      });
      
      updateSummary(baseName, size, painted, widthIn, heightIn, dataUrl);
      updateStats();
      
      resolve();
    }, 100);
  });
}

// FUNCIONES DE INTERFAZ
function updateStats() {
  document.getElementById('totalImages').textContent = analyzedRows.length;
  const totalPixels = analyzedRows.reduce((sum, row) => sum + row.total, 0);
  document.getElementById('totalPixels').textContent = (totalPixels / 1000000).toFixed(1) + 'M';
  const totalPainted = analyzedRows.reduce((sum, row) => sum + row.painted, 0);
  document.getElementById('totalPainted').textContent = (totalPainted / 1000000).toFixed(1) + 'M';
  const uniqueSizes = new Set(analyzedRows.map(row => row.size)).size;
  document.getElementById('uniqueSizes').textContent = uniqueSizes;
}

function updateSummary(base, size, painted, w, h, dataUrl) {
  const container = document.getElementById('summaryCardsContainer');
  const placeholder = container.querySelector('.text-center');
  if(placeholder) placeholder.remove();
  
  const div = document.createElement('div');
  div.className = 'summary-card';
  div.innerHTML = `
    <div class="flex items-center justify-between mb-3">
      <span class="bg-[#DC2626] text-white px-3 py-1 rounded-full text-sm font-bold">${size}</span>
      <span class="text-gray-400 text-sm">${w.toFixed(1)}" √ó ${h.toFixed(1)}"</span>
    </div>
    <img src="${dataUrl}" class="h-20 mx-auto object-contain mb-3 rounded-lg">
    <div class="text-lg font-bold text-white mb-2">${base}</div>
    <div class="stat-value">${(painted/1000).toFixed(0)}K px</div>
    <div class="stat-label text-gray-400">P√≠xeles pintados</div>
  `;
  container.appendChild(div);
  
  document.getElementById('fileNameDisplay').textContent = 
    `${analyzedRows.length} imagen(es) lista(s) ‚Ä¢ Style: ${document.getElementById('globalStyle').value || 'Por definir'}`;
}

// ANIMACI√ìN DEL INTRO
function createParticles() {
  const particlesContainer = document.getElementById('particles');
  particlesContainer.innerHTML = '';
  
  for (let i = 0; i < 30; i++) {
    const particle = document.createElement('div');
    particle.className = 'particle';
    particle.style.left = Math.random() * 100 + 'vw';
    particle.style.animationDelay = Math.random() * 3 + 's';
    particle.style.animationDuration = (3 + Math.random() * 2) + 's';
    particlesContainer.appendChild(particle);
  }
}

function startIntro() {
  try {
    createParticles();
    
    const progressBar = document.getElementById('loadingProgress');
    if (progressBar) {
      progressBar.style.width = '100%';
    }

    setTimeout(() => {
      const intro = document.getElementById('intro');
      const app = document.getElementById('app');
      
      if (intro && app) {
        intro.style.opacity = '0';
        setTimeout(() => {
          intro.style.display = 'none';
          app.style.display = 'block';
        }, 500);
      }
    }, 3000);
  } catch (error) {
    console.error('Error en intro:', error);
    const intro = document.getElementById('intro');
    const app = document.getElementById('app');
    if (intro && app) {
      intro.style.display = 'none';
      app.style.display = 'block';
    }
  }
}

// EVENT LISTENERS
document.addEventListener('DOMContentLoaded', function() {
  // Iniciar intro
  setTimeout(startIntro, 100);
  
  // Event listener para el bot√≥n de Excel
  const generateBtn = document.getElementById('generateExcelBtn');
  if (generateBtn) {
    generateBtn.addEventListener('click', generateDynamicExcel);
  }

  // Event listener para subir im√°genes
  document.getElementById('imageUpload').addEventListener('change', async function(e) {
    const files = e.target.files;
    if(!files.length) {
      document.getElementById('fileNameDisplay').textContent = "Ninguna imagen seleccionada.";
      return;
    }
    
    showImageLoading("Analizando im√°genes...");
    analyzedRows = []; // Limpiar an√°lisis previo
    
    // Limpiar contenedor de resumen
    const container = document.getElementById('summaryCardsContainer');
    container.innerHTML = `
      <div class="text-center py-8 col-span-full">
        <div class="spinner mx-auto mb-4"></div>
        <p class="text-xl text-gray-400">Procesando ${files.length} imagen(es)...</p>
      </div>
    `;
    
    document.getElementById('fileNameDisplay').textContent = `Procesando ${files.length} imagen(es)...`;
    
    // Procesar im√°genes en secuencia con feedback visual
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      if(file.type !== 'image/png') {
        alert("Solo se admiten archivos PNG.");
        continue;
      }
      
      await new Promise((resolve) => {
        const reader = new FileReader();
        reader.onload = function(ev) {
          const img = new Image();
          img.onload = function() {
            analyzeImage(file.name, ev.target.result, img, i, files.length).then(resolve);
          };
          img.src = ev.target.result;
        };
        reader.readAsDataURL(file);
      });
    }
    
    hideImageLoading();
    
    if (analyzedRows.length > 0) {
      document.getElementById('fileNameDisplay').textContent = 
        `${analyzedRows.length} imagen(es) procesadas ‚Ä¢ Style: ${document.getElementById('globalStyle').value || 'Por definir'}`;
    }
  });
});

// FIX DE EMERGENCIA - ELIMINAR INTRO SI SE PEGA
setTimeout(function() {
  const intro = document.getElementById('intro');
  const app = document.getElementById('app');
  if (intro && app && intro.style.display !== 'none') {
    console.log('Fix de emergencia: saltando intro...');
    intro.style.display = 'none';
    app.style.display = 'block';
  }
}, 10000);
</script>
</body>
</html>
